// admin.js - T·ªëi ∆∞u hi·ªáu su·∫•t v√† tr·∫£i nghi·ªám ng∆∞·ªùi d√πng
document.addEventListener("DOMContentLoaded", () => {
  // Cache DOM elements
  const elements = {
    loginBox: document.getElementById("login-box"),
    adminPanel: document.getElementById("admin-panel"),
    loginMsg: document.getElementById("loginMsg"),
    loginForm: document.getElementById("loginForm"),
    logoutBtn: document.getElementById("logoutBtn"),
    // Dark mode elements
    darkModeToggle: document.getElementById("darkModeToggle"),
    modeIcon: document.getElementById("modeIcon"),
    // BTVN elements
    btvnForm: document.getElementById("btvnForm"),
    subject: document.getElementById("subject"),
    btvn_content: document.getElementById("btvn_content"),
    updateBTVN: document.getElementById("updateBTVN"),
    addNewBTVN: document.getElementById("addNewBTVN"),
    // TKB elements
    tkbForm: document.getElementById("tkbForm"),
    tkb_day: document.getElementById("tkb_day"),
    tkb_truc: document.getElementById("tkb_truc"),
    periodsContainer: document.getElementById("periodsContainer"),
    addPeriod: document.getElementById("addPeriod"),
    updateTKB: document.getElementById("updateTKB"),
    addNewTKB: document.getElementById("addNewTKB"),
    // Changelog elements
    changelogForm: document.getElementById("changelogForm"),
    changelog_text: document.getElementById("changelog_text"),
    updateChangelog: document.getElementById("updateChangelog"),
    addNewChangelog: document.getElementById("addNewChangelog"),
    // Data viewer
    refreshData: document.getElementById("refreshData"),
    dataViewer: document.getElementById("dataViewer")
  };

  // H√†m bƒÉm SHA-256 tr·∫£ v·ªÅ chu·ªói hex
  async function sha256Hex(str) {
    const enc = new TextEncoder();
    const data = enc.encode(str);
    const hashBuffer = await crypto.subtle.digest("SHA-256", data);
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    return hashArray.map(b => b.toString(16).padStart(2, "0")).join("");
  }

  // ----- DARK MODE -----
  // Ki·ªÉm tra ch·∫ø ƒë·ªô ƒë√£ l∆∞u trong localStorage
  if (localStorage.getItem("darkMode") === "true") {
    document.body.classList.add("dark");
    elements.modeIcon.textContent = "‚òÄÔ∏è";
  }

  // X·ª≠ l√Ω s·ª± ki·ªán chuy·ªÉn ƒë·ªïi ch·∫ø ƒë·ªô
  elements.darkModeToggle.addEventListener("click", () => {
    document.body.classList.toggle("dark");
    
    // C·∫≠p nh·∫≠t icon v√† l∆∞u tr·∫°ng th√°i
    if (document.body.classList.contains("dark")) {
      elements.modeIcon.textContent = "‚òÄÔ∏è";
      localStorage.setItem("darkMode", "true");
      showToast("ƒê√£ chuy·ªÉn sang ch·∫ø ƒë·ªô t·ªëi", "info");
    } else {
      elements.modeIcon.textContent = "üåô";
      localStorage.setItem("darkMode", "false");
      showToast("ƒê√£ chuy·ªÉn sang ch·∫ø ƒë·ªô s√°ng", "info");
    }
  });

  // ----- LOGIN -----
  // Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
  if (localStorage.getItem("adminLogged") === "true") {
    showAdmin();
  }

  // X·ª≠ l√Ω form ƒëƒÉng nh·∫≠p
  elements.loginForm.addEventListener("submit", (e) => {
    e.preventDefault();
    handleLogin();
  });

  // X·ª≠ l√Ω ƒëƒÉng xu·∫•t
  elements.logoutBtn.addEventListener("click", handleLogout);

  async function handleLogin() {
    const username = document.getElementById("username").value.trim();
    const password = document.getElementById("password").value;

    if (!username || !password) {
      elements.loginMsg.textContent = "Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p v√† m·∫≠t kh·∫©u!";
      showToast("Vui l√≤ng nh·∫≠p ƒë·ªß th√¥ng tin", "error");
      return;
    }

    const enteredHash = await sha256Hex(password);

    if (username === CONFIG.ADMIN_USERNAME && enteredHash === CONFIG.ADMIN_PASSWORD_HASH) {
      localStorage.setItem("adminLogged", "true");
      showAdmin();
      showToast("ƒêƒÉng nh·∫≠p th√†nh c√¥ng", "success");
    } else {
      elements.loginMsg.textContent = "Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u!";
      showToast("Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u", "error");
    }
  }

  function handleLogout() {
    localStorage.removeItem("adminLogged");
    showToast("ƒê√£ ƒëƒÉng xu·∫•t", "info");
    setTimeout(() => location.reload(), 1000);
  }

  function showAdmin() {
    elements.loginBox.style.display = "none";
    elements.adminPanel.style.display = "block";
    // Th√™m hi·ªáu ·ª©ng fade-in cho c√°c ph·∫ßn t·ª≠
    document.querySelectorAll('.card').forEach((card, index) => {
      setTimeout(() => {
        card.classList.add('fade-in');
      }, index * 100);
    });
  }

  // ----- TOAST -----
  function showToast(message, type = "info") {
    // X√≥a toast c≈© n·∫øu c√≥
    const existingToast = document.querySelector(".toast");
    if (existingToast) {
      existingToast.remove();
    }

    const toast = document.createElement("div");
    toast.className = `toast ${type}`;
    toast.textContent = message;
    document.body.appendChild(toast);

    // Hi·ªÉn th·ªã toast
    setTimeout(() => toast.classList.add("show"), 10);

    // ·∫®n toast sau m·ªôt kho·∫£ng th·ªùi gian
    setTimeout(() => {
      toast.classList.remove("show");
      setTimeout(() => toast.remove(), 300);
    }, CONFIG.TOAST_DURATION);
  }

  // ----- BTVN -----
  function getBTVNData() {
    return {
      subject: elements.subject.value,
      content: elements.btvn_content.value,
      note: ""
    };
  }

  // C·∫≠p nh·∫≠t BTVN (ghi ƒë√®)
  elements.updateBTVN.addEventListener("click", () => {
    const data = getBTVNData();
    if (!data.subject || !data.content) {
      showToast("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin", "error");
      return;
    }
    postData({ action: "overwriteBTVN", item: data });
  });

  // Th√™m m·ªõi BTVN
  elements.addNewBTVN.addEventListener("click", () => {
    const data = getBTVNData();
    if (!data.subject || !data.content) {
      showToast("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin", "error");
      return;
    }
    postData({ action: "addBTVN", item: data });
  });

  // ----- TKB -----
  elements.addPeriod.addEventListener("click", addPeriod);
  elements.updateTKB.addEventListener("click", () => saveAllPeriods(true));
  elements.addNewTKB.addEventListener("click", () => saveAllPeriods(false));

  function addPeriod() {
    const periodRow = document.createElement("div");
    periodRow.className = "period-row fade-in";
    periodRow.innerHTML = `
      <select class="period-buoi" required>
        <option value="S√°ng">S√°ng</option>
        <option value="Chi·ªÅu">Chi·ªÅu</option>
      </select>
      <select class="period-tiet" required>
        ${[1, 2, 3, 4, 5].map(i => `<option value="${i}">Ti·∫øt ${i}</option>`).join("")}
      </select>
      <select class="period-subject" required>
        <option value="">-- M√¥n h·ªçc --</option>
        <option value="To√°n">To√°n</option>
        <option value="Ng·ªØ vƒÉn">Ng·ªØ vƒÉn</option>
        <option value="Ti·∫øng Anh">Ti·∫øng Anh</option>
        <option value="V·∫≠t l√Ω">V·∫≠t l√Ω</option>
        <option value="H√≥a h·ªçc">H√≥a h·ªçc</option>
        <option value="Sinh h·ªçc">Sinh h·ªçc</option>
        <option value="L·ªãch s·ª≠">L·ªãch s·ª≠</option>
        <option value="ƒê·ªãa l√≠">ƒê·ªãa l√≠</option>
        <option value="GDCD">GDCD</option>
        <option value="Tin h·ªçc">Tin h·ªçc</option>
        <option value="C√¥ng ngh·ªá">C√¥ng ngh·ªá</option>
        <option value="GDTC">GDTC</option>
        <option value="HƒêTN">HƒêTN</option>
        <option value="GDƒêP">GDƒêP</option>
        <option value="Mƒ© thu·∫≠t">Mƒ© Thu·∫≠t</option>
        <option value="√Çm nh·∫°c">√Çm nh·∫°c</option>
        <option value="Ngh·ªâ">Ngh·ªâ</option>
      </select>
      <button type="button" class="removePeriod" aria-label="X√≥a ti·∫øt">‚ùå</button>
    `;
    
    periodRow.querySelector(".removePeriod").addEventListener("click", () => {
      periodRow.style.transform = "translateX(100%)";
      periodRow.style.opacity = "0";
      setTimeout(() => periodRow.remove(), 300);
    });
    
    elements.periodsContainer.appendChild(periodRow);
  }

  async function saveAllPeriods(overwrite) {
    const day = elements.tkb_day.value;
    const truc = elements.tkb_truc.value;
    const periodRows = elements.periodsContainer.querySelectorAll(".period-row");

    if (!day || periodRows.length === 0) {
      showToast("Ch·ªçn th·ª© v√† nh·∫≠p √≠t nh·∫•t 1 ti·∫øt", "error");
      return;
    }
    
    if (!truc) {
      showToast("Ch·ªçn t·ªï tr·ª±c cho ng√†y n√†y", "error");
      return;
    }

    // Thu th·∫≠p d·ªØ li·ªáu c√°c ti·∫øt
    const periods = [];
    let hasError = false;
    
    periodRows.forEach(row => {
      const buoi = row.querySelector(".period-buoi").value;
      const tiet = row.querySelector(".period-tiet").value;
      const subject = row.querySelector(".period-subject").value;
      
      if (!subject) {
        showToast("Vui l√≤ng ch·ªçn m√¥n h·ªçc cho t·∫•t c·∫£ c√°c ti·∫øt", "error");
        hasError = true;
        return;
      }
      
      periods.push({ buoi, tiet, subject });
    });
    
    if (hasError) return;

    postData({
      action: "updateTKB",
      item: { day, truc, periods: JSON.stringify(periods) },
      overwrite: overwrite
    });
  }

  // ----- CHANGELOG -----
  function getChangelogData() {
    return { text: elements.changelog_text.value };
  }

  elements.updateChangelog.addEventListener("click", () => {
    const data = getChangelogData();
    if (!data.text) {
      showToast("Vui l√≤ng nh·∫≠p n·ªôi dung changelog", "error");
      return;
    }
    postData({ action: "updateChangelog", item: data, overwrite: true });
  });

  elements.addNewChangelog.addEventListener("click", () => {
    const data = getChangelogData();
    if (!data.text) {
      showToast("Vui l√≤ng nh·∫≠p n·ªôi dung changelog", "error");
      return;
    }
    postData({ action: "updateChangelog", item: data, overwrite: false });
  });

  // ----- DATA VIEWER -----
  elements.refreshData.addEventListener("click", loadData);

  // ----- COMMON -----
  async function postData(data) {
    if (window.isLoading) {
      showToast("ƒêang x·ª≠ l√Ω y√™u c·∫ßu tr∆∞·ªõc ƒë√≥, vui l√≤ng ƒë·ª£i...", "info");
      return;
    }
    
    window.isLoading = true;
    
    try {
      const formData = new FormData();
      formData.append("action", data.action);
      formData.append("overwrite", data.overwrite ? "true" : "false");

      if (data.item) {
        for (let key in data.item) {
          formData.append(key, data.item[key] ?? "");
        }
      }

      // Hi·ªÉn th·ªã tr·∫°ng th√°i ƒëang t·∫£i
      showToast("ƒêang x·ª≠ l√Ω...", "info");
      
      const response = await fetch(CONFIG.SCRIPT_URL, {
        method: "POST",
        body: formData
      });
      
      const result = await response.json();
      console.log("RESPONSE:", result);

      if (result.status === "success") {
        showToast("‚úÖ " + (result.result?.action || "Th√†nh c√¥ng"), "success");
        loadData();
      } else {
        showToast("‚ùå " + (result.message || "L·ªói kh√¥ng r√µ"), "error");
      }
    } catch (error) {
      console.error("Error:", error);
      showToast("‚ö†Ô∏è G·ª≠i th·∫•t b·∫°i: " + error.message, "error");
    } finally {
      window.isLoading = false;
    }
  }

  async function loadData() {
    const dataViewer = elements.dataViewer;
    dataViewer.textContent = "ƒêang t·∫£i d·ªØ li·ªáu...";
    
    try {
      const response = await fetch(CONFIG.SCRIPT_URL + "?action=getAll");
      const data = await response.json();
      dataViewer.textContent = JSON.stringify(data, null, 2);
    } catch (error) {
      dataViewer.textContent = "L·ªói: " + error.message;
    }
  }

  // T·∫£i d·ªØ li·ªáu ban ƒë·∫ßu
  loadData();
});