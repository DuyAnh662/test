// K·∫øt h·ª£p c·∫£ hai API URL
const API_URL = "https://script.google.com/macros/s/AKfycbw5sjUwJfwRtKBQQu5FgYrmgSjoQ22vvnmlv99H7YJHTVgVZRXm1vWB7fFJg8B2O2M7/exec";
const SCRIPT_URL = "https://script.google.com/macros/s/AKfycby-w7uCCpBZadyJ1lSUoeFlKZlNcV0sGiAAn0hJJdpK06J2CQfzeIf2c72xRmqQbBOv/exec";

// D·ªØ li·ªáu m·∫∑c ƒë·ªãnh (t·ª´ file 1)
const defaultTKB = {
    0: ["ngh·ªâ"],
    1: ["null"],
    2: ["null"],
    3: ["null"],
    4: ["null"],
    5: ["null"],
    6: ["Ngh·ªâ"]
};

const defaultTruc = {
    0: "Ch·ªß nh·∫≠t: Kh√¥ng tr·ª±c",
    1: "T·ªï 2",
    2: "T·ªï 3",
    3: "T·ªï 4",
    4: "T·ªï 1",
    5: "T·ªï 2",
    6: "T·ªï 3",
};

const dayNames = ["Ch·ªß Nh·∫≠t", "Th·ª© Hai", "Th·ª© Ba", "Th·ª© T∆∞", "Th·ª© NƒÉm", "Th·ª© S√°u", "Th·ª© B·∫£y"];

// Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u d·ªØ li·ªáu t·ª´ API
let currentData = {
    tkb: defaultTKB,
    truc: defaultTruc,
    btvn: [],
    changelog: [],
    notices: []
};

/* -------------------------
Canvas b·∫ßu tr·ªùi sao - ch·ªâ ho·∫°t ƒë·ªông trong dark mode
------------------------- */
const canvas = document.getElementById("sky");
const ctx = canvas.getContext("2d");

function resizeCanvas() {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
}
window.addEventListener("resize", resizeCanvas);
resizeCanvas();

// ---- T·∫°o sao ----
const stars = [];
for (let i = 0; i < 200; i++) {
    stars.push({
        x: Math.random() * canvas.width,
        y: Math.random() * canvas.height,
        r: Math.random() * 1.5,
        opacity: Math.random()
    });
}

// ---- Sao bƒÉng ----
const meteors = [];
let meteorInterval = null;

function createMeteor() {
    meteors.push({
        x: Math.random() * canvas.width,
        y: Math.random() * (canvas.height / 2),
        length: Math.random() * 80 + 40,
        speed: Math.random() * 12 + 8,
        opacity: 1
    });
}

// ---- V·∫Ω b·∫ßu tr·ªùi ----
function drawSky() {
    const isDarkMode = document.body.classList.contains("dark");

    // X√≥a canvas tr∆∞·ªõc khi v·∫Ω
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // Ch·ªâ v·∫Ω khi dark mode ƒë∆∞·ª£c b·∫≠t
    if (isDarkMode) {
        // N·ªÅn tr·ªùi
        ctx.fillStyle = "#0f172a";
        ctx.fillRect(0, 0, canvas.width, canvas.height);

        // V·∫Ω sao
        for (let s of stars) {
            ctx.beginPath();
            ctx.arc(s.x, s.y, s.r, 0, Math.PI * 2);
            ctx.fillStyle = `rgba(255,255,255,${s.opacity})`;
            ctx.fill();
            s.opacity += (Math.random() - 0.5) * 0.05;
            if (s.opacity < 0) s.opacity = 0;
            if (s.opacity > 1) s.opacity = 1;
        }

        // V·∫Ω sao bƒÉng
        for (let i = meteors.length - 1; i >= 0; i--) {
            const m = meteors[i];
            ctx.strokeStyle = `rgba(255,255,255,${m.opacity})`;
            ctx.lineWidth = 2;
            ctx.beginPath();
            ctx.moveTo(m.x, m.y);
            ctx.lineTo(m.x - m.length, m.y - m.length);
            ctx.stroke();

            m.x += m.speed;
            m.y += m.speed;
            m.opacity -= 0.05;

            if (m.opacity <= 0) {
                meteors.splice(i, 1);
            }
        }

        // B·∫Øt ƒë·∫ßu t·∫°o sao bƒÉng n·∫øu ch∆∞a c√≥ interval
        if (meteorInterval === null) {
            meteorInterval = setInterval(createMeteor, 1200);
        }
    } else {
        // D·ª´ng t·∫°o sao bƒÉng khi kh√¥ng ·ªü dark mode
        if (meteorInterval !== null) {
            clearInterval(meteorInterval);
            meteorInterval = null;
            meteors.length = 0; // X√≥a t·∫•t c·∫£ sao bƒÉng
        }
    }

    requestAnimationFrame(drawSky);
}

// B·∫Øt ƒë·∫ßu v·∫Ω b·∫ßu tr·ªùi
drawSky();

/* -------------------------
Menu
------------------------- */
const menuBtn = document.getElementById('menuBtn');
const menuPanel = document.getElementById('menuPanel');

menuBtn.addEventListener('click', (e) => {
    e.stopPropagation();
    menuPanel.style.display = menuPanel.style.display === 'block' ? 'none' : 'block';
});
window.addEventListener('click', (ev) => {
    if (!menuPanel.contains(ev.target) && ev.target !== menuBtn) menuPanel.style.display = 'none';
});

// Dark toggle in menu:
const menuDark = document.getElementById('menuDark');
document.getElementById("menuPopup").addEventListener("click", () => {
    openPopup(true); // m·ªü popup c∆∞·ª°ng b·ª©c khi b·∫•m trong menu
});

// Liquid/Normal toggle
const menuLiquid = document.getElementById('menuLiquid');

function applyThemeFromStorage() {
    // √Åp d·ª•ng dark mode
    if (localStorage.getItem('theme') === 'dark') {
        document.body.classList.add('dark');
        menuDark.textContent = '‚òÄÔ∏è Light Mode';
        // T·ª± ƒë·ªông chuy·ªÉn sang ch·ªß ƒë·ªÅ ƒëen khi b·∫≠t dark mode
        applyColorTheme('black');
    } else {
        document.body.classList.remove('dark');
        menuDark.textContent = 'üåô Dark Mode';
        // Quay l·∫°i ch·ªß ƒë·ªÅ ƒë√£ l∆∞u tr∆∞·ªõc ƒë√≥ khi t·∫Øt dark mode
        const savedTheme = localStorage.getItem('colorTheme') || 'blue';
        applyColorTheme(savedTheme);
    }

    // √Åp d·ª•ng liquid/normal mode
    if (localStorage.getItem('liquidMode') === 'normal') {
        document.body.classList.add('normal-mode');
        menuLiquid.textContent = '‚ú® ƒêang hi·ªÉn th·ªã giao di·ªán th∆∞·ªùng';
    } else {
        document.body.classList.remove('normal-mode');
        menuLiquid.textContent = '‚ú® ƒêang hi·ªÉn th·ªã Liquid Glass';
    }
}

menuDark.addEventListener('click', () => {
    showThemeLoading();

    setTimeout(() => {
        document.body.classList.toggle('dark');
        localStorage.setItem('theme', document.body.classList.contains('dark') ? 'dark' : 'light');
        applyThemeFromStorage();
        hideThemeLoading();
    }, 500);
});

menuLiquid.addEventListener('click', () => {
    showThemeLoading();

    setTimeout(() => {
        document.body.classList.toggle('normal-mode');
        localStorage.setItem('liquidMode', document.body.classList.contains('normal-mode') ? 'normal' : 'liquid');
        applyThemeFromStorage();
        hideThemeLoading();
    }, 500);
});

// X·ª≠ l√Ω m√†u ch·ªß ƒë·ªÅ
function applyColorTheme(theme) {
    // X√≥a t·∫•t c·∫£ c√°c class m√†u ch·ªß ƒë·ªÅ
    document.body.classList.remove('theme-pink', 'theme-blue', 'theme-green', 'theme-fresh', 'theme-popular', 'theme-white', 'theme-black', 'theme-aquaviolet');

    // Th√™m class m√†u ch·ªß ƒë·ªÅ ƒë∆∞·ª£c ch·ªçn
    if (theme) {
        document.body.classList.add(`theme-${theme}`);
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i active cho c√°c n√∫t m√†u
    document.querySelectorAll('.color-theme').forEach(btn => {
        btn.classList.remove('active');
        if (btn.dataset.theme === theme) {
            btn.classList.add('active');
        }
    });

    // L∆∞u m√†u ch·ªß ƒë·ªÅ v√†o localStorage (ch·ªâ khi kh√¥ng ·ªü dark mode)
    if (!document.body.classList.contains('dark')) {
        localStorage.setItem('colorTheme', theme);
    }
}

// Hi·ªáu ·ª©ng loading khi chuy·ªÉn ch·ªß ƒë·ªÅ
function showThemeLoading() {
    const themeLoading = document.getElementById('themeLoading');
    themeLoading.classList.add('active');
}

function hideThemeLoading() {
    const themeLoading = document.getElementById('themeLoading');
    themeLoading.classList.remove('active');
}

// Th√™m s·ª± ki·ªán click cho c√°c n√∫t m√†u
document.querySelectorAll('.color-theme').forEach(btn => {
    btn.addEventListener('click', () => {
        const theme = btn.dataset.theme;
        showThemeLoading();

        setTimeout(() => {
            applyColorTheme(theme);
            hideThemeLoading();
        }, 500);
    });
});

/* -------------------------
Popup logic (1 l·∫ßn/ng√†y)
------------------------- */
const popup = document.getElementById('popup');
const popupClose = document.getElementById('popupClose');

function openPopup(force = false) {
    const today = new Date().toLocaleDateString('vi-VN');
    const disabled = localStorage.getItem('popupDisabled') === 'true'; // n·∫øu user t·∫Øt ho√†n to√†n (kh√¥ng d√πng ·ªü ƒë√¢y)

    if (force) {
        popup.classList.add('open');
        // NgƒÉn scroll trang khi popup m·ªü
        document.body.classList.add('popup-open');
        return;
    }

    if (disabled) return;

    const lastShown = localStorage.getItem('popupShownDate');
    if (lastShown !== today) {
        popup.classList.add('open');
        localStorage.setItem('popupShownDate', today);
        // NgƒÉn scroll trang khi popup m·ªü
        document.body.classList.add('popup-open');
    }
}

// ƒê√≥ng popup khi click v√†o n√∫t ƒë√≥ng
popupClose.addEventListener('click', () => {
    popup.classList.remove('open');
    // Cho ph√©p scroll trang l·∫°i khi popup ƒë√≥ng
    document.body.classList.remove('popup-open');
});

// ƒê√≥ng popup khi click b√™n ngo√†i popup
popup.addEventListener('click', (e) => {
    if (e.target === popup) {
        popup.classList.remove('open');
        // Cho ph√©p scroll trang l·∫°i khi popup ƒë√≥ng
        document.body.classList.remove('popup-open');
    }
});

// ƒê√≥ng popup khi nh·∫•n ph√≠m Escape
document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && popup.classList.contains('open')) {
        popup.classList.remove('open');
        // Cho ph√©p scroll trang l·∫°i khi popup ƒë√≥ng
        document.body.classList.remove('popup-open');
    }
});

/* -------------------------
T·∫£i d·ªØ li·ªáu t·ª´ API
------------------------- */
async function fetchData() {
    try {
        const res = await fetch(SCRIPT_URL + "?action=getAll");
        const j = await res.json();
        // N·∫øu c√≥ "result" th√¨ tr·∫£ v·ªÅ result
        return j.result || j;
    } catch (e) {
        console.error(e);
        return null;
    }
}
// H√†m render BTVN t·ª´ API
function renderBTVN(data) {
    const container = document.getElementById('btvnContainer');
    if (!data?.btvn?.length) {
        container.innerHTML = "<p>Ch∆∞a c√≥ b√†i t·∫≠p.</p>";
        return;
    }

    let html = "";
    const subjects = {};
    
    // Nh√≥m b√†i theo m√¥n h·ªçc
    data.btvn.forEach(item => {
        if (!subjects[item.subject]) {
            subjects[item.subject] = [];
        }
        subjects[item.subject].push(item);
    });

    // Render theo t·ª´ng m√¥n
    Object.keys(subjects).forEach(subject => {
        html += `<h2 class="animate-item">${getSubjectIcon(subject)} ${subject}</h2>`;
        html += '<ul class="animate-item">';
        
        subjects[subject].forEach(item => {
            html += `<li>${item.content}</li>`;
        });
        
        html += '</ul>';
    });

    container.innerHTML = html;
}

// H√†m render TKB t·ª´ API
function renderTKB(data) {
    const container = document.getElementById('tkbContainer');
    if (!data?.tkb) {
        container.innerHTML = "<p>Kh√¥ng c√≥ d·ªØ li·ªáu TKB.</p>";
        return;
    }

    const d = getVNDateObj();
    let day = d.getDay();
    const hour = d.getHours();

    if (hour < 7) day = (day - 1 + 7) % 7;

    let showDay;
    if (day === 5 || day === 6 || day === 0) showDay = 1;
    else showDay = (day + 1) % 7;

    let tomorrowDate = new Date(d);
    if (day === 5) tomorrowDate.setDate(d.getDate() + ((1 + 7 - day) % 7));
    else if (day === 6) tomorrowDate.setDate(d.getDate() + ((1 + 7 - day) % 7));
    else if (day === 0) tomorrowDate.setDate(d.getDate() + 1);
    else tomorrowDate.setDate(d.getDate() + 1);

    const formattedDate = tomorrowDate.toLocaleDateString("vi-VN");

    let html = `<p>H√¥m nay: <strong>${dayNames[d.getDay()]}</strong>, ${d.toLocaleDateString('vi-VN')} ‚Äî Hi·ªÉn th·ªã TKB <strong>${dayNames[showDay]}</strong>, ng√†y ${formattedDate}</p>`;
    html += `<div class="inline-note">‚ùóL∆∞u √Ω: Sau 7:00 s√°ng TKB s·∫Ω chuy·ªÉn sang ng√†y ti·∫øp theo.</div>`;

    html += `<div class="day-container">`;
    html += `<div class="day-header">${dayNames[showDay]}</div>`;
    html += `<div class="session-container">`;

    // Bu·ªïi s√°ng
    html += `<div class="session-header morning-header">Bu·ªïi s√°ng</div>`;
    html += `<table class="session-table"><thead><tr><th>Ti·∫øt</th><th>M√¥n / N·ªôi dung</th></tr></thead><tbody>`;
    if (data.tkb[showDay]) {
        data.tkb[showDay]
            .filter(p => p.buoi === "S√°ng")
            .forEach(p => {
                html += `<tr><td>${p.tiet}</td><td>${p.subject}</td></tr>`;
            });
    }
    html += `</tbody></table>`;

    // Bu·ªïi chi·ªÅu
    html += `<div class="session-header afternoon-header">Bu·ªïi chi·ªÅu</div>`;
    html += `<table class="session-table"><thead><tr><th>Ti·∫øt</th><th>M√¥n / N·ªôi dung</th></tr></thead><tbody>`;
    if (data.tkb[showDay]) {
        data.tkb[showDay]
            .filter(p => p.buoi === "Chi·ªÅu")
            .forEach(p => {
                html += `<tr><td>${p.tiet}</td><td>${p.subject}</td></tr>`;
            });
    }
    html += `</tbody></table>`;

    html += `</div></div>`;
    html += `<p style="margin-top:10px;"><b>L·ªãch tr·ª±c: </b> <span id="todayTruc">${data.tkb[showDay]?.[0]?.truc || 'Kh√¥ng c√≥ d·ªØ li·ªáu'}</span></p>`;

    container.innerHTML = html;
}
// H√†m render changelog t·ª´ API
function renderChangelog(data) {
    const container = document.getElementById('changelogContainer');
    if (!data?.changelog?.length) {
        container.innerHTML = "<p>Ch∆∞a c√≥ d·ªØ li·ªáu changelog.</p>";
        return;
    }

    let html = '<div class="changelog animate-item">';
    html += '<strong>Nh·ªØng thay ƒë·ªïi g·∫ßn ƒë√¢y</strong>';
    html += '<ul>';
    
    data.changelog.forEach(item => {
        html += `<li>${item}</li>`;
    });
    
    html += '</ul></div>';
    container.innerHTML = html;
}

// H√†m render th√¥ng b√°o t·ª´ API
function renderNotices(data) {
    const container = document.getElementById('noticesContainer');
    if (!data?.notices?.length) {
        container.style.display = 'none';
        return;
    }

    let html = '<strong>TH√îNG B√ÅO:</strong>';
    html += '<ul>';
    
    data.notices.forEach(notice => {
        html += `<li>${notice}</li>`;
    });
    
    html += '</ul>';
    container.innerHTML = html;
    container.style.display = 'block';
}

// H√†m l·∫•y icon cho m√¥n h·ªçc
function getSubjectIcon(subject) {
    const icons = {
        'ƒê·ªãa l√≠': 'üìò',
        'To√°n h·ªçc': '‚ûó',
        'Ng·ªØ vƒÉn': '‚úç',
        'Sinh h·ªçc': 'üß¨',
        'GDƒêP': 'üè†',
        'L·ªãch s·ª≠': 'üìú',
        'V·∫≠t l√Ω': 'üî¨',
        'HƒêTN, HN': 'ü§ù',
        'Mƒ© thu·∫≠t': 'üé®',
        'H√≥a h·ªçc': '‚öó',
        'Ti·∫øng Anh': 'üá¨üáß',
        'C√¥ng d√¢n': 'üë•',
        'C√¥ng ngh·ªá': 'üîß',
        '√Çm nh·∫°c': 'üé∂',
        'Tin h·ªçc': 'üíª'
    };
    return icons[subject] || 'üìö';
}

// H√†m t·∫£i v√† hi·ªÉn th·ªã to√†n b·ªô d·ªØ li·ªáu
async function loadAllData() {
    const data = await fetchData();
    if (data) {
        // C·∫≠p nh·∫≠t d·ªØ li·ªáu to√†n c·ª•c
        currentData = {
            tkb: data.tkb || defaultTKB,
            truc: data.truc || defaultTruc,
            btvn: data.btvn || [],
            changelog: data.changelog || [],
            notices: data.notices || []
        };
        
        renderBTVN(currentData);
        renderTKB(currentData);
        renderChangelog(currentData);
        renderNotices(currentData);
    } else {
        // S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c t·ª´ API
        currentData = {
            tkb: defaultTKB,
            truc: defaultTruc,
            btvn: [],
            changelog: [],
            notices: []
        };
        
        renderBTVN(currentData);
        renderTKB(currentData);
        renderChangelog(currentData);
        renderNotices(currentData);
    }
}

// Gi·ªØ nguy√™n h√†m renderTodayTKB t·ª´ File 1 nh∆∞ng s·ª≠a ƒë·ªÉ s·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ API
async function renderTodayTKB() {
    renderTKB(currentData);
}

document.getElementById('showFullBtn').addEventListener('click', async function() {
    const full = document.getElementById('fullTKB');
    if (full.style.display === 'block') {
        full.style.display = 'none';
        this.textContent = 'üìÖ Xem to√†n b·ªô TKB';
        return;
    }

    let html = `<div style="margin-bottom:8px;"><strong>üìÖ Th·ªùi kh√≥a bi·ªÉu c·∫£ tu·∫ßn</strong></div>`;
    for (let k = 1; k <= 6; k++) {
        html += `<div class="day-container">`;
        html += `<div class="day-header">${dayNames[k]}</div>`;
        html += `<div class="session-container">`;

        // Bu·ªïi s√°ng
        html += `<div class="session-header morning-header">Bu·ªïi s√°ng</div>`;
        html += `<table class="session-table"><thead><tr><th>Ti·∫øt</th><th>M√¥n</th></tr></thead><tbody>`;
        if (currentData.tkb[k]) {
            currentData.tkb[k].filter(p => p.buoi === "S√°ng").forEach(p => {
                html += `<tr><td>${p.tiet}</td><td>${p.subject}</td></tr>`;
            });
        }
        html += `</tbody></table>`;

        // Bu·ªïi chi·ªÅu
        html += `<div class="session-header afternoon-header">Bu·ªïi chi·ªÅu</div>`;
        html += `<table class="session-table"><thead><tr><th>Ti·∫øt</th><th>M√¥n</th></tr></thead><tbody>`;
        if (currentData.tkb[k]) {
            currentData.tkb[k].filter(p => p.buoi === "Chi·ªÅu").forEach(p => {
                html += `<tr><td>${p.tiet}</td><td>${p.subject}</td></tr>`;
            });
        }
        html += `</tbody></table>`;

        html += `<div class="truc-container" style="margin-top: 12px; padding: 8px; background: var(--table-header-bg); border-radius: 8px;">`;
        html += `<strong style="color: var(--table-header-text);">üßπ L·ªãch tr·ª±c: </strong>`;
        html += `<span>${currentData.tkb[k]?.[0]?.truc || 'Kh√¥ng c√≥ d·ªØ li·ªáu'}</span>`;
        html += `</div>`;

        html += `</div></div><div class="day-divider"></div>`;
    }

    full.innerHTML = html;
    full.style.display = 'block';
    this.textContent = '‚ùå ·∫®n to√†n b·ªô';
});
// Helper function: get VN date/time (works cross-browser)
function getVNDateObj() {
    const s = new Date().toLocaleString('en-US', {
        timeZone: 'Asia/Ho_Chi_Minh'
    });
    return new Date(s);
}

/* -------------------------
Small accessibility: close menu with ESC
------------------------- */
window.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
        document.getElementById('menuPanel').style.display = 'none';
        document.getElementById('popup').classList.remove('open');
        document.body.classList.remove('popup-open');
    }
});

// X·ª≠ l√Ω s·ª± ki·ªán xoay m√†n h√¨nh
window.addEventListener('orientationchange', function() {
    // C·∫≠p nh·∫≠t l·∫°i k√≠ch th∆∞·ªõc canvas b·∫ßu tr·ªùi sao
    resizeCanvas();

    // C·∫≠p nh·∫≠t l·∫°i v·ªã tr√≠ c√°c ph·∫ßn t·ª≠
    setTimeout(function() {
        renderTodayTKB();
    }, 300);
});

// Th√™m s·ª± ki·ªán touch ƒë·ªÉ c·∫£i thi·ªán tr·∫£i nghi·ªám tr√™n thi·∫øt b·ªã c·∫£m ·ª©ng
document.addEventListener('touchstart', function() {}, {
    passive: true
});

// H√†m kh·ªüi t·∫°o
window.addEventListener('load', () => {
    applyThemeFromStorage();
    openPopup(false);
    
    // ·∫®n m√†n h√¨nh loading
    setTimeout(function() {
        const loadingScreen = document.getElementById('loadingScreen');
        loadingScreen.style.opacity = '0';
        setTimeout(function() {
            loadingScreen.style.display = 'none';
        }, 500);
    }, 1500);
    
    // T·∫£i d·ªØ li·ªáu t·ª´ API
    loadAllData();
    
    // C·∫≠p nh·∫≠t TKB m·ªói ph√∫t
    setInterval(renderTodayTKB, 60 * 1000);
    
    // √Åp d·ª•ng hi·ªáu ·ª©ng xu·∫•t hi·ªán cho c√°c ph·∫ßn t·ª≠
    const fadeElements = document.querySelectorAll('.fade-in-text');
    fadeElements.forEach((element, index) => {
        setTimeout(function() {
            element.style.animationDelay = `${index * 0.1}s`;
        }, 100);
    });

    const animateElements = document.querySelectorAll('.animate-item');
    animateElements.forEach((element, index) => {
        setTimeout(function() {
            element.style.animationDelay = `${0.2 + index * 0.05}s`;
        }, 100);
    });

    // T·ªëi ∆∞u h√≥a cho thi·∫øt b·ªã di ƒë·ªông
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

    if (isMobile) {
        // Th√™m class mobile v√†o body ƒë·ªÉ √°p d·ª•ng CSS ri√™ng
        document.body.classList.add('mobile-device');

        // T·ªëi ∆∞u h√≥a popup cho thi·∫øt b·ªã di ƒë·ªông
        const popupCard = document.getElementById('popupCard');
        if (popupCard) {
            // ƒê·∫£m b·∫£o popup c√≥ th·ªÉ cu·ªôn
            popupCard.style.maxHeight = '80vh';
            popupCard.style.overflowY = 'auto';
            popupCard.style.webkitOverflowScrolling = 'touch';
        }

        // T·ªëi ∆∞u h√≥a c√°c b·∫£ng ƒë·ªÉ cu·ªôn ngang n·∫øu c·∫ßn
        const tables = document.querySelectorAll('table');
        tables.forEach(table => {
            const wrapper = document.createElement('div');
            wrapper.style.overflowX = 'auto';
            wrapper.style.marginBottom = '10px';
            table.parentNode.insertBefore(wrapper, table);
            wrapper.appendChild(table);
        });

        // TƒÉng k√≠ch th∆∞·ªõc c√°c n√∫t b·∫•m cho d·ªÖ thao t√°c
        const buttons = document.querySelectorAll('button, .menu-btn, #showFullBtn');
        buttons.forEach(button => {
            button.style.minHeight = '44px'; // K√≠ch th∆∞·ªõc t·ªëi thi·ªÉu theo khuy·∫øn ngh·ªã c·ªßa Apple
            button.style.minWidth = '44px';
        });

        // T·ªëi ∆∞u h√≥a menu cho thi·∫øt b·ªã di ƒë·ªông
        const menuPanel = document.getElementById('menuPanel');
        if (menuPanel) {
            menuPanel.style.maxHeight = '70vh';
            menuPanel.style.overflowY = 'auto';
        }
    }
});